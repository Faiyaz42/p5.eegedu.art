
// https://p5js.org/examples/interaction-snake-game.html

class MySketch extends React.Component {
 setup(p5, whereToPlot) {
   
   numSegments = 10;
   direction = 'right'
   xStart = 0 
   yStart = 250
   diff = 10
   xCor = []
   yCor = []
   xFruit = 250
   yFruit = 250
   score = 0
   
   p5.createCanvas(500, 500).parent(whereToPlot)
   p5.frameRate(15)
   p5.stroke(255)
   p5.strokeWeight(10)
   p5.textSize(15)
   
   for (i = 0; i < numSegments; i++) {
     xCor.push(xStart + i * diff)
     yCor.push(yStart)
   }
 }
 
 draw(p5) {
  
   ALPHA = 50-brain.current.LeftBackAlpha
   DELTA = p5.map(brain.current.LeftBackDelta,0,100,0,10,true);
   
   diff = DELTA;
   
   p5.background(0)

   p5.fill(255)
   p5.strokeWeight(1)
   p5.text('Use keys W A S & D', 30, 40)
   p5.text('Score: ' + score, 30, 80)
   p5.strokeWeight(10)

   for (i = 0; i < numSegments - 1; i++) {
     p5.stroke(200, DELTA, 20)
     p5.line(xCor[i], yCor[i], xCor[i + 1], yCor[i + 1])
     p5.stroke(255)
   }
   updateSnakeCoordinates() 
   checkGameStatus()
   checkForFruit()

   
   function updateSnakeCoordinates() {
   
     for (i = 0; i < numSegments - 1; i++) {
       xCor[i] = xCor[i + 1]
       yCor[i] = yCor[i + 1]
     }
     switch (direction) {
       case 'right':
         xCor[numSegments - 1] = xCor[numSegments - 2] + diff
         yCor[numSegments - 1] = yCor[numSegments - 2]
         break
       case 'up':
         xCor[numSegments - 1] = xCor[numSegments - 2]
         yCor[numSegments - 1] = yCor[numSegments -2] - diff
         break
       case 'left':
         xCor[numSegments - 1] = xCor[numSegments - 2] - diff
         yCor[numSegments - 1] = yCor[numSegments - 2]
         break
       case 'down':
         xCor[numSegments - 1] = xCor[numSegments - 2]
         yCor[numSegments - 1] = yCor[numSegments - 2] + diff
         break
     }
   }
   
   function checkGameStatus() {
     if (
       xCor[xCor.length - 1] > p5.width ||
       xCor[xCor.length - 1] < 0 ||
       yCor[yCor.length - 1] > p5.height ||
       yCor[yCor.length - 1] < 0 ||
       checkSnakeCollision()
     ) {
       p5.noLoop()
       p5.strokeWeight(1)
       p5.text('Game Over!', 30, 120)
       p5.strokeWeight(10)
 
     }
   }
   
   function checkSnakeCollision() {
     const snakeHeadX = xCor[xCor.length - 1]
     const snakeHeadY = yCor[yCor.length - 1]
     for (let i = 0; i < xCor.length - 1; i++) {
       if (xCor[i] === snakeHeadX && yCor[i] === snakeHeadY) {
         return true
       }
     }
   }
   
   function checkForFruit() {
     p5.strokeWeight(ALPHA)
     p5.stroke(20, (ALPHA*10), (ALPHA*10))
     p5.point(xFruit, yFruit)
     p5.stroke(255)
     p5.strokeWeight(10)

     give = ALPHA-10 // so that as the point grows the snake eats it
     if (
         xCor[xCor.length - 1] > xFruit - give &&
         xCor[xCor.length - 1] < xFruit + give &&
         yCor[yCor.length - 1] > yFruit - give &&
         yCor[yCor.length - 1] < yFruit + give
        ) {
       score++
       xCor.unshift(xCor[0])
       yCor.unshift(yCor[0])
       numSegments++
       updateFruitCoordinates()
     }  
   } 
   
   function updateFruitCoordinates() {
     xFruit = p5.floor(p5.random(10, (p5.width - 100)  / 10)) * 10
     yFruit = p5.floor(p5.random(10, (p5.height - 100) / 10)) * 10   
   } 
 }
 
keyPressed(p5) {

   switch (p5.keyCode) {
     case 65: 
       if (direction !== 'right') {
         direction = 'left'
       }  
       break
     case 68:
       if (direction !== 'left') {
         direction = 'right'
       }
       break
     case 87:
       if (direction !== 'down') {
         direction = 'up';
       }
       break
     case 83:
       if (direction !== 'up') {
         direction = 'down'
       }
       break
   }
 } 
 
 render() {
   return (
      <Sketch
        setup={this.setup}
        draw={this.draw}
        keyPressed={this.keyPressed}
      />
   )
 }

}

render (
 <MySketch />
)

