class MySketch extends React.Component {
 setup(p5, whereToPlot) {
   movers = []
   p5.createCanvas(500, 500).parent(whereToPlot)
   class Mover {
     constructor(x, y, m, l) {
       this.pos = p5.createVector(x, y);
       this.lab = l;
       this.mag = m;
       this.vel = p5.createVector(p5.random(-1, 1), p5.random(-1, 1));
       this.vel.mult(p5.random(3));
       
     }
     
     update() {
       center = p5.createVector(p5.width/2, p5.height/2);
       this.acc = center.sub(this.pos);
       this.acc.setMag(this.mag);
       this.vel.add(this.acc);
       //this.vel.limit(3);
       this.pos.add(this.vel);
     }
     
     show() {
       p5.ellipse(p5.width/2, p5.height/2,10);
       p5.textSize(20);
       p5.fill(255);
       p5.text(this.lab, this.pos.x, this.pos.y)
     }
   }   
   movers[0] = new Mover(100, 100, brain.current.bands.data.delta[1]/10, 'delta');
   movers[1] = new Mover(100, 100, brain.current.bands.data.theta[1]/10, 'theta');
   movers[2] = new Mover(100, 100, brain.current.bands.data.alpha[1]/10, 'alpha'); 
   movers[3] = new Mover(100, 100, brain.current.bands.data.beta[1]/10, 'beta');
   movers[4] = new Mover(100, 100, brain.current.bands.data.gamma[1]/10, 'gamma');

 }
 draw(p5) {
   p5.background(0);

     movers[0].update();
     movers[0].show()
     movers[1].update();
     movers[1].show()     
     movers[2].update();
     movers[2].show()
     movers[3].update();
     movers[3].show()
     movers[4].update();
     movers[4].show()          
 }
 
 render() {
   return (
      <Sketch
        setup={this.setup}
        draw={this.draw}
      />
   )
 }
}

render (
 <MySketch />
)

                